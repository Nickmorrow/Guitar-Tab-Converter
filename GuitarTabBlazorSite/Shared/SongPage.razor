@page "/SongPage"
@using GuitarTabBlazorSite.Data
@using GuitarTabConverter
@inject GTCData Data
@inject NavigationManager Navigation

<div class="choose-instrument">
    <div><h3>Choose Instrument</h3> </div>
    <div>
        <button @onclick="_IsGuitar">Guitar</button>
        <button @onclick="_IsBassGuitar">Bass Guitar</button>
        <button @onclick="_IsUkelele">Ukelele</button>
        <button @onclick="_IsBanjo">Banjo</button>
        <button @onclick="GoBackToSearch">Back to Search</button>
    </div>
 </div>
 
 @if(_isGuitar)
{
    <TabComponent Tab="_tab" ></TabComponent>    
}
@if(_isBassGuitar)
{
    <TabComponent Tab="_tab" ></TabComponent>    
}
@if(_isUkelele)
{
    <TabComponent Tab="_tab" ></TabComponent>    
}
@if(_isBanjo)
{
    <TabComponent Tab="_tab" ></TabComponent>    
}


@code 
{
    private bool _trackClicked { get; set; }

    [Parameter]
    public SongsterrSong selectedSong { get; set; }

    [Parameter]
    public AppJson songJson { get; set; }

    private StringInstrument _selectedInstrument { get; set; }

    private List<MusicalBeat> _songBeats { get; set; }

    [Parameter]
    public EventCallback<bool> trackLinkClicked { get; set; }

    private void GoBackToSearch()
    {
        trackLinkClicked.InvokeAsync(false);
        Navigation.NavigateTo("/");
    }

    private Tab _tab { get; set; }

    private bool _converted  { get; set; } 
    private int _instNum { get; set; }

    private bool _isGuitar { get; set; }
    private bool _isBassGuitar { get; set; }
    private bool _isUkelele { get; set; }
    private bool _isBanjo { get; set; }

    private void _IsGuitar()
    {
        _isGuitar = true;
        _isBassGuitar = false;
        _isUkelele = false;
        _isBanjo = false;
        _converted = false;
        _instNum = 0;
        _selectedInstrument = Data.InstrumentList[_instNum];
        _songBeats = Data.GetSongBeats(selectedSong, _selectedInstrument, Data.InstrumentList);
        _tab = new Tab(selectedSong, _selectedInstrument, _songBeats, songJson, _converted);
    }
    private void _IsBassGuitar()
    {
        _isGuitar = false;
        _isBassGuitar = true;
        _isUkelele = false;
        _isBanjo = false;
        _converted = true;
        _instNum = 1;
        _selectedInstrument = Data.InstrumentList[_instNum];
        _songBeats = Data.GetSongBeats(selectedSong, _selectedInstrument, Data.InstrumentList);
        _tab = new Tab(selectedSong, _selectedInstrument, _songBeats, songJson, _converted);
    }
    private void _IsUkelele()
    {
        _isGuitar = false;
        _isBassGuitar = false;
        _isUkelele = true;
        _isBanjo = false;
        _converted = true;
        _instNum = 2;
        _selectedInstrument = Data.InstrumentList[_instNum];
        _songBeats = Data.GetSongBeats(selectedSong, _selectedInstrument, Data.InstrumentList);
        _tab = new Tab(selectedSong, _selectedInstrument, _songBeats, songJson, _converted);
    }
    private void _IsBanjo()
    {
        _isGuitar = false;
        _isBassGuitar = false;
        _isUkelele = false;
        _isBanjo = true;
        _converted = true;
        _instNum = 3;
        _selectedInstrument = Data.InstrumentList[_instNum];
        _songBeats = Data.GetSongBeats(selectedSong, _selectedInstrument, Data.InstrumentList);
        _tab = new Tab(selectedSong, _selectedInstrument, _songBeats, songJson, _converted);
    }


    

}
