@page "/TabComponent"
@using GuitarTabBlazorSite.Data
@using GuitarTabConverter
@inject GTCData Data

<div class="tab-body">
    <div>
        <strong>@Tab.ArtistName</strong>
        <div>@Tab.TitleOfSong</div>
        <div>@Tab.InstrumentString</div>

        <div class="tuning">
            @foreach (RootNotes tuning in Tab.Tuning.Reverse<RootNotes>())
            {
                <div>@tuning.ToString().Substring(0, 1)</div>
            }
        </div>
            @if (Tab.Capo == 0)
            {
                <div>No Capo</div>
            }
            else
            {
                <div>Capo on Fret @Tab.Capo.ToString()</div>
            }
    </div>

    <div class="tablines-body">
        @for (int outerIndex = 0; outerIndex < tabOne.Count; outerIndex += 4)
        {
            <div class="tab-row">
                @for (int innerIndex = 0; innerIndex < 4 && (outerIndex + innerIndex) < tabOne.Count; innerIndex++)
                {
                    
                    int tabIndex = outerIndex + innerIndex;
                    <div class="measure">
                        @for (int stringNum = 0; stringNum < Tab.TabLines.Count; stringNum++)
                        {
                            List<List<string>> instString = Tab.TabLines[stringNum];
                            List<string> measure = instString[tabIndex];
                            <div class="tabline">
                            @for (int beatIndex = 0; beatIndex < measure.Count; beatIndex++)
                                {
                                    string beat = measure[beatIndex];
                                    if (measure[0] != "|")
                                    {
                                        <div class="tuning">@beat</div>                                       
                                    }
                                    else
                                    {
                                        <div class="beat">@beat</div>
                                    }
                                }
                            </div>
                        }
                    </div>                    
                }
            </div>
        }

        
        
           
    </div> 
        @*@while (tabLineStartPoint < tabLength)
            {
                int remainingMeasures = tabLength - tabLineEndPoint;
                for (int i = 0; i < Tab.TabLines.Count; i++)
                {
                    List<List<string>> tabLine = Tab.TabLines[i];
                    <div class="tabline">
                    @for (int h = tabLineStartPoint; h < tabLineEndPoint; h++)
                    {
                        List<string> measure = tabLine[h];
                        int dashCount = measure.Count;

                        <div class="measures"> 
                        @for (int k = 0; k < dashCount; k++)
                        {
                            <div class="16ths"><p>@measure[k]</p></div>
                        }
                        </div>
                    }
                    </div>
                }
                tabLineStartPoint += 10;
                if (remainingMeasures >= 10)
                {
                    tabLineEndPoint += 10;
                }
                else
                {
                    tabLineEndPoint = tabLength;
                }
            }

        }*@
        

    


</div>


@code {

    [Parameter]
    public Tab Tab { get; set; }

    private List<List<string>> tabOne;

    private int rowcounter = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        tabOne = Tab.TabLines[0];
    }

  


}

