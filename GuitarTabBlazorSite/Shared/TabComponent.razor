@page "/TabComponent"
@using GuitarTabBlazorSite.Data
@using GuitarTabConverter
@using PdfSharp.Pdf
@using PdfSharp.Drawing
@inject GTCData Data
@inject IJSRuntime JSRuntime

<button class="print-button" @onclick="PrintComponent">Print</button>
<button class="pdf-button" @onclick="DownloadPDF">Download PDF</button>

<div class="tab-body" id="tab-body-content">
    <div>
        <strong>@Data.tab.ArtistName</strong>
        <div>@Data.tab.TitleOfSong</div>
        <div>@Data.tab.InstrumentString</div>

        <div class="tuning">
            @foreach (RootNotes tuning in Data.tab.Tuning.Reverse<RootNotes>())
            {
                <div>@tuning.ToString().Substring(0, 1)</div>
            }
        </div>
            @if (Data.tab.Capo == 0)
            {
                <div>No Capo</div>
            }
            else
            {
                <div>Capo on Fret @Data.tab.Capo.ToString()</div>
            }
    </div>

    <div class="tablines-body">
        @for (int outerIndex = 0; outerIndex < Data.tab.TabLines[0].Count; outerIndex += 4)
        {
            <div class="tab-row">
                @for (int innerIndex = 0; innerIndex < 4 && (outerIndex + innerIndex) < Data.tab.TabLines[0].Count; innerIndex++)
                {
                    
                    int tabIndex = outerIndex + innerIndex;
                    <div class="measure">
                        @for (int stringNum = 0; stringNum < Data.tab.TabLines.Count; stringNum++)
                        {
                            List<List<string>> instString = Data.tab.TabLines[stringNum];
                            List<string> measure = instString[tabIndex];
                            <div class="tabline">
                            @for (int beatIndex = 0; beatIndex < measure.Count; beatIndex++)
                                {
                                    string beat = measure[beatIndex]; @*Not used*@
                                    if (measure[0] != "|")
                                    {
                                        <div class="tuning">@beat</div>                                       
                                    }
                                    else
                                    {
                                        <div class="beat">
                                            @foreach (char character in beat)
                                            {
                                                <span>@character</span><span>&nbsp;</span>
                                            }   
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>                    
                }
            </div>
        }                        
    </div>           
</div>


@code {
    private async Task DownloadPDF()
    {

        PdfDocument document = new PdfDocument();
        PdfPage page = document.AddPage();
        XGraphics gfx = XGraphics.FromPdfPage(page);


        XFont font = new XFont("Helvetica Nue", 12);
        gfx.DrawString("Hello, world!", font, XBrushes.Black, new XRect(10, 10, page.Width, page.Height), XStringFormats.TopLeft);


        using (MemoryStream stream = new MemoryStream())
        {
            document.Save(stream, false);
            stream.Position = 0;


            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", 
                "tab_component.pdf", 
                Convert.ToBase64String(stream.ToArray()));
        }
    } 

    private void PrintComponent()
    {
        JSRuntime.InvokeVoidAsync("printContent", "tab-body-content");
    }

    //private List<List<string>> tabOne;

    //private int rowcounter = 0;

    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();

    //    tabOne = Data.tab.TabLines[0];
    //}

    
  


}

