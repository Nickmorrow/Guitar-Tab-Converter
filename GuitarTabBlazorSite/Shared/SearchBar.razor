@page "/Search"
@using GuitarTabBlazorSite.Data
@using GuitarTabConverter
@using System.Threading
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@inject GTCData Data
@inject NavigationManager nav


 
<div style="display: flex; flex-direction: column; align-items: center;">

<div style="display: flex; flex-direction: column; align-items: center;">
    <img src="@ImagePath" alt="logo" style="width: 300px; height: auto; margin-bottom: 5px;"/>

    <div class="searchbar-container" style="width: 600px; margin-bottom: 10px;  display: flex; align-items: center; border: 1px solid black; border-radius: 100px; padding: 5px;"> 
        <div style="margin-left: 10px; margin-bottom: 5px">
            <div style="height: 20px; width: 20px;">
                <svg focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
                </svg>
            </div>
        </div>
        <input class="form-control custom-searchbar" style="width: 100%; max-width: 650px; border: none; outline: none;" placeholder="Search over 800,000 Guitar tabs!" @bind="_searchItem" />
    </div> 

    <button class="form-control" style="max-width: 100px; margin-top: 5px;;" @onclick="_SearchClickedAsync">Search</button>
</div>

<div>

@if (_searchClicked)
{
    <div style="text-align: center; font-size: 25px"><p>@_loadingDots.Replace(".", "●")</p></div> 

    @if (_FilteredListJson.Count() == 0 & _isLoading == false | _searchItem == null)
    {
        <p><em>No Results</em></p> 
    }
    else
    {
        <table class="table">       
            <tbody>
                @foreach (AppJson Json in _FilteredListJson)
                {
                    <tr @onclick="() => ToggleRowExpansion(Json)"class="@GetRowClass(Json)">
                        <td style="text-align: center; font-size: 18px">
                            @Json.meta.current.artist, @Json.meta.current.title 
                        </td>
                    </tr>
                    @if (_IsRowExpanded(Json))
                    {
                        GuitarOnly(Json);
                        foreach (Track guitarTrack in _guitarOnly)
                        {
                            <tr  @onclick="@( async () => await TrackClicked(Json, guitarTrack))" style="transition: max-height 0.5s ease-in-out; max-height: @(_IsRowExpanded(Json) ? "1000px" : "0px")">                                
                                <td colspan="2" style="text-align: center; font-size: 15px; color: #400;">@guitarTrack.instrument, @guitarTrack.name</td> 
                            </tr>   
                        }                     
                    }
                }
            </tbody>
        </table> 
    }
                             
}
</div>
</div>



@code {

    private string ImagePath = "/images/logo.jpg";

    //private Dictionary<AppJson, bool> _IsRowExpanded { get; set; } = new Dictionary<AppJson, bool>();

    //private void ToggleRowExpansion(AppJson json)
    //{
    //    if (_IsRowExpanded.ContainsKey(json))
    //    {
    //        _IsRowExpanded[json] = !_IsRowExpanded[json];
    //    }
    //    else
    //    {
    //        _IsRowExpanded[json] = true;
    //    }
    //}

    private Dictionary<AppJson, bool> _expandedRows = new Dictionary<AppJson, bool>();

    private void ToggleRowExpansion(AppJson item)
    {
        if (_expandedRows.ContainsKey(item))
        {
            _expandedRows[item] = !_expandedRows[item];
        }
        else
        {
            _expandedRows[item] = true;
        }
    }

    private bool _IsRowExpanded(AppJson item)
    {
        return _expandedRows.ContainsKey(item) && _expandedRows[item];
    }

    private string GetRowClass(AppJson item)
    {
        return _IsRowExpanded(item) ? "expanded" : "";
    }

    private bool _isLoading = false;

    private string _loadingDots = "";

    private string _searchItem { get; set; }  

    private string _userSearchedUrl { get; set; }

    private string _fullSearchedUrl { get; set; }

    private string _userSearchedHTML { get; set; }

    private List<string> _SongUrls { get; set; }

    private List<AppJson> _UserSearchedJson = new();

    private List<AppJson> _FilteredListJson = new();  

    private Track[] _SongTracks { get; set; }

    private List<Track> _guitarOnly { get; set; }

    private AppJson _songJson { get; set; }

    [Parameter]
    public EventCallback<AppJson> sendSongJson { get; set; }

    private bool _searchClicked { get; set; }

    [Parameter]
    public EventCallback<bool> trackLinkClicked { get; set; }

    private int _trackIndex { get; set; }

    private int _GetTrackIndex(Track guitarTrack, int trackIndex)
    {
        for (int i= 0;i< _SongTracks.Count();i++)
        {
            if (guitarTrack == _SongTracks[i])
            {
                trackIndex = i;
                break;
            }
        }
        return trackIndex;
    }

    private string _trackUrl { get; set; }

    private string _trackHTML { get; set; }

    private SongsterrSong _selectedSong { get; set; }

    [Parameter]
    public EventCallback<SongsterrSong> sendSelectedSong { get; set; }

    private Track _selectedTrack { get; set; }   

    private System.Threading.Timer _loadingTimer;

    private CancellationTokenSource _cancellationTokenSource;

    private async Task _SearchClickedAsync()
    {
        _searchClicked = true;
        _isLoading = true;

        if (_searchItem != null)
        {
            _searchItem = _searchItem.ToLower().TrimEnd();
            _userSearchedUrl = $"/?pattern={_searchItem}";
            _fullSearchedUrl = $"https://www.songsterr.com{_userSearchedUrl}";

            CancellationTokenSource cts = new CancellationTokenSource();

            _userSearchedHTML = await Data.HttpGetAsync($"{_fullSearchedUrl}", cts.Token);
            _SongUrls = Data.GetSongUrls(_userSearchedHTML);

            try
            {
                _loadingTimer = new System.Threading.Timer(_ => UpdateLoadingDots(), null, 0, 500);

                _UserSearchedJson = await Data.SearchJsonAsync(_searchItem, _UserSearchedJson, _SongUrls, cts.Token);
                _FilteredListJson = _UserSearchedJson
                    .Where(s => s.meta.current.title.ToLower() == _searchItem || s.meta.current.artist.ToLower() == _searchItem)
                    .ToList();
            }
            catch (OperationCanceledException)
            {
                // Handle cancellation if needed
            }
            finally
            {
                // Ensure the timer is not null and is not disposed before changing or disposing
                if (_loadingTimer != null && !_loadingTimer.Change(Timeout.Infinite, Timeout.Infinite))
                {
                    _loadingTimer.Dispose();
                }

                _loadingDots = ""; // Clear loading dots after processing
                _isLoading = false; // Ensure _isLoading is set to false
            }
        }
    }

    private void UpdateLoadingDots()
    {
        InvokeAsync(() =>
        {
            _loadingDots = _loadingDots.Length < 3 ? _loadingDots + "." : ".";
            StateHasChanged(); 
    });
    }

    public void GuitarOnly(AppJson Json)
    {
        _SongTracks = Json.meta.current.tracks;
        _guitarOnly = _SongTracks.Where(x => x.isGuitar).ToList();    
    }

    private bool _trackClicked { get; set; } 

    public async Task TrackClicked(AppJson Json, Track guitarTrack)
    {
        
        _trackClicked = true;
        _songJson = Json;
        _trackIndex = _GetTrackIndex(guitarTrack, _trackIndex);
        _trackUrl = Data.GetUrl(_userSearchedHTML,_songJson, _trackIndex);
        _trackHTML = Data.HttpGet(_trackUrl);//Data.TrackHTML(_trackUrl);
        _selectedSong = Data.GetSong(_trackHTML, _selectedSong);
        _selectedTrack = _SongTracks[_trackIndex];
        await trackLinkClicked.InvokeAsync(true); 
        await sendSelectedSong.InvokeAsync(_selectedSong); 
        await sendSongJson.InvokeAsync(_songJson);
        //nav.NavigateTo("/SongPage");
    }
        
    }

    

    






