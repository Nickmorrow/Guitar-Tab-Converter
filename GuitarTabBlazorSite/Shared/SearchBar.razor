@page "/Search"
@using GuitarTabBlazorSite.Data
@using GuitarTabConverter
@using System.Threading
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json;
@using Newtonsoft.Json.Converters;
@inject GTCData Data
@inject NavigationManager navToSongPage



 <div class="search-page">
<div class="search-component"style="display: flex; flex-direction: column; align-items: center;">

<div style="display: flex; flex-direction: column; align-items: center;">                                                                                                                   
    <img src="@ImagePath" alt="logo" style="width: 400px; height: auto; margin-bottom: 0px;"/>

    <form @onsubmit="HandleFormSubmit" style="display: flex; flex-direction: column; align-items: center;">
    <div class="searchbar-container" style="width: 600px; margin-bottom: 10px;  display: flex; align-items: center;  border-radius: 100px; padding: 5px; box-shadow: 0 0 10px rgba(0, 0, 0, 0); 
            transition: box-shadow 0.3s; background-color: #fff; "onmouseover="this.style.boxShadow = '0 0 10px #3c4c62';"onmouseout="this.style.boxShadow = '0 0 5px rgba(0, 0, 0, 0)';"> 
        <div style="margin-left: 10px; margin-bottom: 5px; color: #3c4c62;">
            <div style="height: 20px; width: 20px; ">
                <svg focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
                </svg>
            </div>
        </div>
        <input class="searchbar" ref="searchInput" style="width: 100%; max-width: 650px; border: none; outline: none;" placeholder="Search over 1,000,000 Guitar tabs!" @bind="Data.searchItem" />          
    </div> 
    </form>

    <button class="form-control" style="max-width: 100px; margin-top: 25px; background-color: #3c4c62; color: #fff; transition: transform 0.3s;"
        onmouseover="this.style.transform = 'scale(1.1)';"onmouseout="this.style.transform = 'scale(1)';" 
         @onclick="Data._SearchClickedAsync">Search</button>
            
</div>

<div class="results-table" style="display: flex; flex-direction: column; align-items: center; margin-top: 10px;">

@if (Data.searchClicked)
{
    
    @if (Data.isLoading == true )
    {
            <div class="spinner-grow" role="status" style=" color: #3c4c62; "></div>            
    }
    @if (Data.searchResults.Count() == 0 && !Data.isLoading)
    {
        <p>No Results</p> 
    }
    else
    {
        <table class="table">       
            <tbody>
                @foreach (AppJson Json in Data.searchResults)
                {
                    <tr style="cursor: pointer;" @onclick="() => ToggleRowExpansion(Json)"class="@GetRowClass(Json)">
                        <td style="text-align: center; font-size: 22px; color: #3c4c62; transition: transform 0.3s;
                            "onmouseover="this.style.transform = 'scale(1.1)';
                            "onmouseout="this.style.transform = 'scale(1)';">

                                <strong>@Json.meta.current.artist, @Json.meta.current.title</strong>
                        </td>
                    </tr>
                    @if (_IsRowExpanded(Json))
                    {
                        Data.GuitarOnly(Json);
                        foreach (Track guitarTrack in Data.guitarOnly)
                        {
                            <tr style=" cursor: pointer; transition: max-height 0.5s ease-in-out; max-height: @(_IsRowExpanded(Json) ? "1000px" : "0px")"
                                @onclick="@( async () =>  HandleTrackClicked(Json, guitarTrack))"> 
                                                               
                                <td colspan="2" style="text-align: center; font-size: 15px; color: #3c4c62; transition: transform 0.3s;
                                    "onmouseover="this.style.transform = 'scale(1.1)';
                                    "onmouseout="this.style.transform = 'scale(1)';">
                                        @guitarTrack.instrument, @guitarTrack.name</td> 
                            </tr>   
                        }                     
                    }
                }
            </tbody>
        </table> 
    }
                             
}
</div>
</div>
</div>



@code {

    private async Task HandleFormSubmit()
    {
        await Data._SearchClickedAsync();
    }   

    private string ImagePath = "/images/logocolored.jpg";  

    private Dictionary<AppJson, bool> _expandedRows = new Dictionary<AppJson, bool>();

    private void ToggleRowExpansion(AppJson item)
    {
        if (_expandedRows.ContainsKey(item))
        {
            _expandedRows[item] = !_expandedRows[item];
        }
        else
        {
            _expandedRows[item] = true;
        }
    }

    private bool _IsRowExpanded(AppJson item)
    {
        return _expandedRows.ContainsKey(item) && _expandedRows[item];
    }

    private string GetRowClass(AppJson item)
    {
        return _IsRowExpanded(item) ? "expanded" : "";
    }

    private void HandleTrackClicked(AppJson json, Track guitarTrack)
    {
        Data.TrackClicked(json, guitarTrack);
        NavigateToAnotherPage();
    }

    private void NavigateToAnotherPage()
    {       
        navToSongPage.NavigateTo("/SongPage");
    }
        
    }

    

    






