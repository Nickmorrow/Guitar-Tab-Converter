@page "/SearchBar"
@using GuitarTabBlazorSite.Data
@using GuitarTabConverter
@using System.Threading
@inject GTCData Data
@inject NavigationManager nav



<h1>Welcome to Guitar Tab Converter</h1>

Search over 800,000 Guitar tabs!

<input class= "form-control" style= "max-width:600px"placeholder="Search..."
    @bind="_searchItem" />

<button class="form-control" style="max-width 300px"
    @onclick="_SearchClickedAsync">Search</button>

@if (_searchClicked)
{
    <p><em>@_loadingDots</em></p> 

    @if (_FilteredListJson.Count() == 0 & _isLoading == false)
    {
        <p><em>No Results</em></p> 
    }
    else
    {
        <table class="table">       
            <tbody>
                @foreach (AppJson Json in _FilteredListJson)
                {
                    <tr @onclick="() => ToggleRowExpansion(Json)">
                        <td>
                            @Json.meta.current.artist, @Json.meta.current.title  
                        </td>
                    </tr>
                    @if (_IsRowExpanded.ContainsKey(Json) && _IsRowExpanded[Json])
                    {
                        GuitarOnly(Json);
                        foreach (Track guitarTrack in _guitarOnly)
                        {
                            <tr @onclick="@(() => {TrackClicked(Json, guitarTrack); trackLinkClicked.InvokeAsync(true); sendSelectedSong.InvokeAsync(_selectedSong); sendSongJson.InvokeAsync(_songJson);})">                                
                                <td>@guitarTrack.instrument, @guitarTrack.name</td> 
                            </tr>   
                        }                     
                    }
                }
            </tbody>
        </table> 
    }
                             
}


@code {

    private Dictionary<AppJson, bool> _IsRowExpanded { get; set; } = new Dictionary<AppJson, bool>();

    private void ToggleRowExpansion(AppJson json)
    {
        if (_IsRowExpanded.ContainsKey(json))
        {
            _IsRowExpanded[json] = !_IsRowExpanded[json];
        }
        else
        {
            _IsRowExpanded[json] = true;
        }
    }

    private bool _isLoading = false;

    private string _loadingDots = "";

    private string _searchItem { get; set; }  

    private string _userSearchedUrl { get; set; }

    private string _fullSearchedUrl { get; set; }

    private string _userSearchedHTML { get; set; }

    private List<string> _SongUrls { get; set; }

    private List<AppJson> _UserSearchedJson = new();

    private List<AppJson> _FilteredListJson = new();  

    private Track[] _SongTracks { get; set; }

    private List<Track> _guitarOnly { get; set; }

    private AppJson _songJson { get; set; }

    [Parameter]
    public EventCallback<AppJson> sendSongJson { get; set; }

    private bool _searchClicked { get; set; }

    [Parameter]
    public EventCallback<bool> trackLinkClicked { get; set; }

    private int _trackIndex { get; set; }

    private int _GetTrackIndex(Track guitarTrack, int trackIndex)
    {
        for (int i= 0;i< _SongTracks.Count();i++)
        {
            if (guitarTrack == _SongTracks[i])
            {
                trackIndex = i;
                break;
            }
        }
        return trackIndex;
    }


    private string _trackUrl { get; set; }

    private string _trackHTML { get; set; }

    private SongsterrSong _selectedSong { get; set; }

    [Parameter]
    public EventCallback<SongsterrSong> sendSelectedSong { get; set; }

    private Track _selectedTrack { get; set; }   

    private CancellationTokenSource _cancellationTokenSource;

    private System.Threading.Timer _loadingTimer;

    private async Task _SearchClickedAsync()
    {
        _searchClicked = true;
        _isLoading = true;

        _userSearchedUrl = $"/?pattern={_searchItem}";
        _fullSearchedUrl = $"https://www.songsterr.com{_userSearchedUrl}";
        _userSearchedHTML = await Data.HttpGetAsync($"{_fullSearchedUrl}");
        _SongUrls = Data.GetSongUrls(_userSearchedHTML);

        _loadingTimer = new System.Threading.Timer(_ => UpdateLoadingDots(), null, 0, 500);

        _UserSearchedJson = await Data.SearchJsonAsync(_searchItem, _UserSearchedJson, _SongUrls);
        _FilteredListJson = _UserSearchedJson
            .Where(s => s.meta.current.title.ToLower() == _searchItem.ToLower() || s.meta.current.artist.ToLower() == _searchItem.ToLower())
            .ToList();

        _loadingTimer.Change(Timeout.Infinite, Timeout.Infinite); // Stop the timer when loading is complete
        _loadingDots = ""; // Clear loading dots after processing
        _isLoading = false; // Ensure _isLoading is set to false
    }

    private void UpdateLoadingDots()
    {
        InvokeAsync(() =>
        {
            _loadingDots = _loadingDots.Length < 3 ? _loadingDots + "." : ".";
            StateHasChanged(); // Notify Blazor to re-render
        });
    }

    public void GuitarOnly(AppJson Json)
    {
        _SongTracks = Json.meta.current.tracks;
        _guitarOnly = _SongTracks.Where(x => x.isGuitar).ToList();    
    }


    private bool _trackClicked { get; set; } 

    public async void TrackClicked(AppJson Json, Track guitarTrack)
    {
        _trackClicked = true;
        _songJson = Json;
        _trackIndex = _GetTrackIndex(guitarTrack, _trackIndex);
        _trackUrl = Data.GetUrl(_userSearchedHTML,_songJson, _trackIndex);
        _trackHTML = Data.HttpGet(_trackUrl);//Data.TrackHTML(_trackUrl);
        _selectedSong = Data.GetSong(_trackHTML, _selectedSong);
        _selectedTrack = _SongTracks[_trackIndex];
    }





}
